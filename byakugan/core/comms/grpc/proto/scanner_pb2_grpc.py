"""Generated gRPC code"""
import grpc

from . import scanner_pb2 as scanner__pb2

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in scanner_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ScannerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteScan = channel.unary_unary(
                '/byakugan.scanner.ScannerService/ExecuteScan',
                request_serializer=scanner__pb2.ScanTask.SerializeToString,
                response_deserializer=scanner__pb2.ScanResult.FromString,
                _registered_method=True)
        self.StreamResults = channel.stream_stream(
                '/byakugan.scanner.ScannerService/StreamResults',
                request_serializer=scanner__pb2.ScanResult.SerializeToString,
                response_deserializer=scanner__pb2.StreamAck.FromString,
                _registered_method=True)
        self.GetTaskStatus = channel.unary_unary(
                '/byakugan.scanner.ScannerService/GetTaskStatus',
                request_serializer=scanner__pb2.TaskStatusRequest.SerializeToString,
                response_deserializer=scanner__pb2.TaskStatus.FromString,
                _registered_method=True)
        self.Heartbeat = channel.unary_unary(
                '/byakugan.scanner.ScannerService/Heartbeat',
                request_serializer=scanner__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=scanner__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.GetScanStatus = channel.unary_unary(
                '/byakugan.scanner.ScannerService/GetScanStatus',
                request_serializer=scanner__pb2.StatusRequest.SerializeToString,
                response_deserializer=scanner__pb2.ScanStatus.FromString,
                _registered_method=True)


class ScannerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteScan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamResults(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetScanStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ScannerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteScan': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteScan,
                    request_deserializer=scanner__pb2.ScanTask.FromString,
                    response_serializer=scanner__pb2.ScanResult.SerializeToString,
            ),
            'StreamResults': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamResults,
                    request_deserializer=scanner__pb2.ScanResult.FromString,
                    response_serializer=scanner__pb2.StreamAck.SerializeToString,
            ),
            'GetTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskStatus,
                    request_deserializer=scanner__pb2.TaskStatusRequest.FromString,
                    response_serializer=scanner__pb2.TaskStatus.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=scanner__pb2.HeartbeatRequest.FromString,
                    response_serializer=scanner__pb2.HeartbeatResponse.SerializeToString,
            ),
            'GetScanStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetScanStatus,
                    request_deserializer=scanner__pb2.StatusRequest.FromString,
                    response_serializer=scanner__pb2.ScanStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'byakugan.scanner.ScannerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('byakugan.scanner.ScannerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ScannerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteScan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/byakugan.scanner.ScannerService/ExecuteScan',
            scanner__pb2.ScanTask.SerializeToString,
            scanner__pb2.ScanResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamResults(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/byakugan.scanner.ScannerService/StreamResults',
            scanner__pb2.ScanResult.SerializeToString,
            scanner__pb2.StreamAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/byakugan.scanner.ScannerService/GetTaskStatus',
            scanner__pb2.TaskStatusRequest.SerializeToString,
            scanner__pb2.TaskStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/byakugan.scanner.ScannerService/Heartbeat',
            scanner__pb2.HeartbeatRequest.SerializeToString,
            scanner__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetScanStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/byakugan.scanner.ScannerService/GetScanStatus',
            scanner__pb2.StatusRequest.SerializeToString,
            scanner__pb2.ScanStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
